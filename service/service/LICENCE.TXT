//Copyright?2000 NEOSYS Software Ltd. All Rights Reserved.//**Start Encode**

///ACCOUNT

//default batch account
function journal_def_batchaccount()
{

 //skip if not visible
 if (journal.generalstyle!='CASH') return ''
 
 //default/skip if single account setup
 if (temp=journal_def_account('BATCH_ACCOUNT')) return temp
 
 return ''
 
}

//default main account
function journal_def_mainaccount()
{
 if (journal_continuation()) return ''
 
 //if first line then default to account on first line of previous voucher
 if (journal.sign!=''&&(temp=getpreviousrow('',true))) return temp

 //default/skip if single account setup
 if (temp=journal_def_account('MAIN_ACCOUNT')) return temp
 
 //default to the previous voucher mainaccount
 return getpreviousrow('',true)

}

//default other account
function journal_def_otheraccount()
{
 
 if (journal_continuation()) return ''
 
 //if first line then default to account on first line of previous voucher
 if (temp=journal_findvoucher(grecn-1))
 {
  if (temp=gds.calcx('OTHER_ACCOUNT_NO',temp.firstln)[0]) return temp
 }
 
 //default/skip if single account setup
 return journal_def_account('OTHER_ACCOUNT_NO')
 
}

//pop batch account
function journal_pop_batchaccount()
{
 return journal_pop_mainaccount()
}

//pop main account
function journal_pop_mainaccount()
{
 return journal_pop_account(journal.allmainaccs)
}

//pop other account
function journal_pop_otheraccount()
{
 return journal_pop_account(journal.allotheraccs)
}

//validate batch account
function journal_val_batchaccount()
{

 //prevent ,company code in batch heading
 if (gvalue.indexOf(',')>=0) return neosysinvalid('You cannot crosspost in the heading.\r\rSwitch to the other company before posting')

 //check exists, not control, and company, and relevent chart/account
 if (!journal_val_account('VAL.MAIN.ACCOUNT',journal.mainaccs)) return false

 //prevent suspense account here
 if (gvalue.indexOf('ZZZ999')+1) return neosysinvalid('You cannot use the ZZZ999 Suspense Account here')

 return true
 
}

//validate main account
function journal_val_mainaccount()
{
 
 //skip if continuation line
 if (journal_continuation())
 {
  gvalue=''
  return true
 }
 
 //check exists, not control, and company, and relevent chart/account
 if (!journal_val_account('VAL.MAIN.ACCOUNT',journal.mainaccs,'MAIN_DETAILS',3)) return false

 //warning if reference is already used on this account
 //checked on reference and main_account_no in case eith
 if (!journal_check_reference(gds.calcx('REFERENCE')[0],gvalue)) return neosysinvalid()
 
 return true
 
}

//validate other account
function journal_val_otheraccount()
{

 //check exists, not control, and company, and relevent chart/account
 if (!journal_val_account('VAL.OTHER.ACCOUNT',journal.otheraccs,'OTHER_DETAILS',9)) return false
 
 //clear any allocations as the account number no longer matches the line(s) in the other voucher(s)
 //note: when reposting a batch, all allocations are ignored in upd.voucher i think
 //perhaps should register that fact if they try and change any allocations?
 if (!journal.isposted&&gds.calcx('ALLOC_VOUCHER',grecn)[0])
 {
  gds.setrecord('ALLOC_VOUCHER',grecn,'')
  gds.setrecord('ALLOC_AMOUNT',grecn,'')
  neosyswarning('Note: You will have to re-enter the allocations')
 }

 return true
 
}


//default account
function journal_def_account(mode)
{
 
 //if account list, return the first
 
 var accs=(mode=='OTHER_ACCOUNT_NO')?journal.otheraccs:journal.mainaccs
 var externalaccs=(mode=='OTHER_ACCOUNT_NO')?journal.externalotheraccs:journal.externalmainaccs 
 if (!accs||accs[0]=='CHART') return ''
 
 //if only one then focusnext
 if (accs.length==1) focusnext()
 
 return externalaccs[0]+sm+accs[0]
 
}

//pop account
function journal_pop_account(accs)
{

 var gvalue=getvalue(gpreviouselement)
 
 //filter current company if no company code
 var companycode=gcompany.code
 //filter specific company or all companies if input simply ends with ,
 if (gvalue.indexOf(',')+1) companycode=gvalue.split(sm)[0].split(',')[1]
 
 return finance_getacc('ACCOUNT',accs,companycode)
 
}

//validate account
function journal_val_account(mode,accs,descdictid,descfn)
{

 //very similar in GENERAL.JS val_account
 
 //extract company code
 var forcedcompanycode=gvalue.split(',')[1]
 if (!forcedcompanycode) forcedcompanycode=''
 
 //call the database to validate the account
 var data
 if (!(data=journal_val_accountx(mode,accs,gvalue))) return false
 
 //if response is an account list then choose an account
 while (data.indexOf('/ACCOUNTLIST/')+1)
 {
 
  var accno=finance_pop_accountlist(data,false)
  if (!accno) return false
  
 //add the company code back
 if (forcedcompanycode)
 {
 
  accno+=','+forcedcompanycode
  
 }
  
  //and resubmit validation request
  if (!(data=journal_val_accountx(mode,accs,accno))) return false
  
 }

 //extract the response
 data=data.split(rm)
 gvalue=data[0]
 var account=data[1].split(fm)
 var oldaccount=data[2].split(fm)
 var warnings=data[3]

 /* allowed now that analysis code is present
 //warn/prevent manual posting to sales/cost/tax accounts
 if (journal.billcostaccs.neosyslocate(gvalue.split(sm)[0]))
 {
  var msg='Postings to A/c. '+account[1]+' ('+gvalue.split(sm)[0]+')\r should not be entered manually because they are generated automatically by a NEOSYS billing module.'
  msg+='\r\rThe billing analysis reports will NOT MATCH\rthe Trial Balance/Profit & Loss Statement!'
  if (!neosyssecurity('JOURNAL POST REVENUE ACCOUNTS')) return neosysinvalid(msg+'\r\r'+gmsg)
  msg='WARNING: '+msg+'\r\rAre you SURE that you want to post to this account?'
  if (!neosysyesno(msg,2)) return false
 }
 */
 
 //add the company code back
 if (forcedcompanycode)
 {
 
  //check account company
  var msg=account[10]+' - '+account[1]+'\rAccount belongs to company '+account[5]
  if (account[5]&&account[5]!=forcedcompanycode)   return neosysinvalid(msg)

  //gvalue+=','+forcedcompanycode
  gvalue=gvalue.split(sm)
  gvalue[0]=gvalue[0].split(',')
  gvalue[0][1]=forcedcompanycode
  gvalue[0]=gvalue[0].join(',')
  gvalue=gvalue.join(sm)
  
 }

 //save the accounts in the cache (not needed if from cache already?)
 writecacherecord(account,'ACCOUNTS')
 var a0=account[0]
 var a10=account[10]
 account[0]='.'+a10
 account[10]=a0
 writecacherecord(account,'ACCOUNTS')
 account[0]=a0
 account[10]=a10
 
 if (goldvalue)
 {
  writecacherecord(oldaccount,'ACCOUNTS')
  var a0=oldaccount[0]
  var a10=oldaccount[10]
  oldaccount[0]=a10
  oldaccount[10]=a0
  writecacherecord(oldaccount,'ACCOUNTS')
  oldaccount[0]=a0
  oldaccount[10]=a10
 }
 
 //any warnings
 if (warnings)
 {
  if (!neosysokcancel(warnings.neosysconvert(fm,'\r'),2)) return false
 }
 
 //update the description
 if (descdictid&&journal.wis[descfn])
 {
  var temp=gds.calcx(descdictid,grecn)[0]
  var temp2=temp
  //if (temp) temp=temp.neosysswap(oldaccount[1],'')
  //if (temp) temp+=' '
  //temp+=account[1]
  
  //replace the old account name if present with a special marker
  if (oldaccount[1]&&temp2.indexOf(oldaccount[1])>=0)
  {
   temp2=temp2.neosysswap(oldaccount[1],account[1]?account[1]:'?)
  }
  
  //replace the special account name marker with the new account name
  if (account[1]&&temp2.indexOf('?)>=0)
  {
   temp2=temp2.neosysswap('?,account[1])
  }
  
  //if just the marker then make blank (but see next step)
  if (temp2=="?) temp2=''
  
  //if nothing then put the new account name
  if (temp2=="") temp2=account[1]
  
  //update the record
  if (temp2!=temp) gds.setrecord(descdictid,grecn,temp2)

 }
 
 return true
 
}

//validate accountx
function journal_val_accountx(mode,accs,accno)
{

 var validaccs=(mode=='VAL.MAIN.ACCOUNT')?journal.mainaccs:journal.otheraccs
 
 //get batch or voucher period (needed to check period is valid for other company if present)
 //only send it if necessary to avoid breaking cache
 var period=''
 if (gvalue.indexOf(',')+1)
 {
  period=gds.calcx('PERIOD')
  if (!period) period=new finance_periodfromdate(gds.calcx('VOUCHER_DATE',grecn)[0],gcompany).period
 }

 //vchno only required if reposting
 var vchno=journal.isposted?journal_findvoucher().vchno:''
 
 //nb journal type in key is only required when reposting to see if the voucher
 //or if company entered (in order to reget the complete set of valid accounts from definition)
 //also send if is OB so that posting to summary accounts (eg VAT) can be prevented
 var id=[gcompany.code]
 if (period||vchno||journal.style.slice(0,2)=='OB') id[1]=journal.code
 id=id.join('*')
 
 //get database to validate the account{,company} 
 db.request=['CACHE','EXECUTE','FINANCE',mode,id,accno,goldvalue,validaccs,period,vchno].join('\r')
 if(!db.send())
  return neosysinvalid(db.response)

 //prevent posting to exchange gain/losses
 if (gcompany.data[4].split(sm)[1]==accno||gcompany.data[5].split(sm)[1]==accno||gcompany.data[12].split(sm)[1]==accno)
 {
  if (!neosyssecurity('JOURNAL POST REVALUATION'))
   return neosysinvalid('You cannot post directly to the NEOSYS\r'+db.data.split(fm)[1]+' account|You can create/post to another account')
 }
 
 return db.data
 
}