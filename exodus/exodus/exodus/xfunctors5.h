#ifndef ExodusFunctorS5_H
#define ExodusFunctorS5_H

//generated by genfunctors.cpp

#include <exodus/mvfunctor.h>

template<class T1, class T2, class T3, class T4, class T5>
class ExodusFunctorS5 : private ExodusFunctorBase
{
public:
 ExodusFunctorS5(const std::string libname,const std::string funcname)
	: ExodusFunctorBase(libname,funcname){}

 void operator() ()
 {
	checkload();
	typedef void (*ExodusDynamic)(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5);
	 ((ExodusDynamic) pfunction_)(T1(), T2(), T3(), T4(), T5());
	return;
 }

 void operator() (T1 arg1)
 {
	checkload();
	typedef void (*ExodusDynamic)(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5);
	 ((ExodusDynamic) pfunction_)(arg1, T2(), T3(), T4(), T5());
	return;
 }

 void operator() (T1 arg1, T2 arg2)
 {
	checkload();
	typedef void (*ExodusDynamic)(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5);
	 ((ExodusDynamic) pfunction_)(arg1, arg2, T3(), T4(), T5());
	return;
 }

 void operator() (T1 arg1, T2 arg2, T3 arg3)
 {
	checkload();
	typedef void (*ExodusDynamic)(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5);
	 ((ExodusDynamic) pfunction_)(arg1, arg2, arg3, T4(), T5());
	return;
 }

 void operator() (T1 arg1, T2 arg2, T3 arg3, T4 arg4)
 {
	checkload();
	typedef void (*ExodusDynamic)(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5);
	 ((ExodusDynamic) pfunction_)(arg1, arg2, arg3, arg4, T5());
	return;
 }

 void operator() (T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5)
 {
	checkload();
	typedef void (*ExodusDynamic)(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5);
	 ((ExodusDynamic) pfunction_)(arg1, arg2, arg3, arg4, arg5);
	return;
 }

};
#endif
